#define RES_ACK 0
#define RES_NACK 1

#define ACT_ACK 0
#define ACT_NACK 1

proc (int) NibbleController<int uhu>(int res) {
start: // Just some sample data
    yield (1);
    assert(res == RES_ACK);
    yield (uhu);
    assert(res == RES_ACK);
    yield (13);
    assert(res == RES_ACK);
goto start;
}


//<BUSCONTROLLER>
proc (int) BusController(int res) {
    int data; int data_pos; int nibble_res;
    nibble_res = RES_ACK;
start:
    data = call(nibble_res);
    data_pos = 0; 
    while(data_pos < 4){
        yield ((data >> (3-data_pos)) & 1);  //MSB first
        data_pos = data_pos + 1;     }
    yield (1);   // this reads back the ACK bit
    if(res == 0) {
        nibble_res = RES_ACK; goto start;
    } else {
        nibble_res = RES_NACK; goto start;    }
}
//</BUSCONTROLLER>

proc (int) NibbleResponder(int res) {
start:
    yield (ACT_ACK); // always ACK
    goto start;
}

//<BUSRESPONDER>
proc (int) BusResponder(int res) {
    int buf; int read; int ack;
start:
    buf = 0; read = 0;
    while(read < 4){
        yield (1);
        assert(res == 0 or res == 1);
        buf = (buf << 1) | res;
        read = read + 1;    }
    (ack) = call(buf);
    yield (ack); goto start;
}
//</BUSRESPONDER>

system {
    layers [Bus, Nibble];

    device controller {
        Nibble : NibbleController<15>;
        Bus : BusController;
    };

    device responder {
        Nibble : NibbleResponder;
        Bus : BusResponder;
    };
}
